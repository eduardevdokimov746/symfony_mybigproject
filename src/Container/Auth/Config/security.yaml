security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        db:
            entity:
                class: App\Container\User\Entity\Doc\User


    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            form_login:
                provider: db
                username_parameter: login
                password_parameter: password
                check_path: auth.login
                failure_path: auth.login
                enable_csrf: true
                csrf_token_id: '%auth_csrf_token_id%'
                csrf_parameter: '%form.type_extension.csrf.field_name%'
                default_target_path: home.main
                use_referer: true

            logout:
                path: auth.logout
                target: home.main

            remember_me:
                remember_me_parameter: remember_me
                signature_properties:
                    - password
                    - email
                    - isActive
                lifetime: 604800


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
